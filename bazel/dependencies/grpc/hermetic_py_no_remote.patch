diff --git a/bazel/cython_library.bzl b/bazel/cython_library.bzl
index dc2ef7a890..fd2881ed8c 100644
--- a/bazel/cython_library.bzl
+++ b/bazel/cython_library.bzl
@@ -72,7 +72,7 @@ def pyx_library(name, deps = [], py_deps = [], srcs = [], **kwargs):
         native.cc_binary(
             name = shared_object_name,
             srcs = [stem + ".cpp"],
-            deps = deps + ["@local_config_python//:python_headers"],
+            deps = deps + ["@rules_python//python/cc:current_py_cc_headers"],
             defines = defines,
             linkshared = 1,
         )
diff --git a/third_party/py/python_configure.bzl b/third_party/py/python_configure.bzl
index 6569d3e9c1..ef9ef8f36a 100644
--- a/third_party/py/python_configure.bzl
+++ b/third_party/py/python_configure.bzl
@@ -91,14 +91,21 @@ def _read_dir(repository_ctx, src_dir):
         )
         return find_result.stdout
 
-def _genrule(src_dir, genrule_name, command, outs):
+def _genrule(src_dir, genrule_name, command, outs, tags = []):
     """Returns a string with a genrule.
 
   Genrule executes the given command and produces the given outputs.
   """
-    return ("genrule(\n" + '    name = "' + genrule_name + '",\n' +
-            "    outs = [\n" + outs + "\n    ],\n" + '    cmd = """\n' +
-            command + '\n   """,\n' + ")\n")
+    genrule = ("genrule(\n" + '    name = "' + genrule_name + '",\n' +
+               "    outs = [\n" + outs + "\n    ],\n" + '    cmd = """\n' +
+               command + '\n   """,\n')
+    if tags:
+        genrule += "    tags = [\n"
+        for tag in tags:
+            genrule += '"' + tag + '"\n'
+        genrule += "\n    ],\n"
+    genrule += ")\n"
+    return genrule
 
 def _normalize_path(path):
     """Returns a path with '/' and remove the trailing slash."""
@@ -148,6 +155,7 @@ def _symlink_genrule_for_dir(
         genrule_name,
         " && ".join(command),
         "\n".join(outs),
+        ["no-remote"],
     )
 
 def _get_python_bin(repository_ctx, bin_path_key, default_bin_path, allow_absent):
